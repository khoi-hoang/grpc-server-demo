// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.1
// source: simple_operation.proto

package grpc_simple_operation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SimpleOperationClient is the client API for SimpleOperation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimpleOperationClient interface {
	Sum(ctx context.Context, in *SimpleOperationRequest, opts ...grpc.CallOption) (*SimpleOperationResponse, error)
}

type simpleOperationClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleOperationClient(cc grpc.ClientConnInterface) SimpleOperationClient {
	return &simpleOperationClient{cc}
}

func (c *simpleOperationClient) Sum(ctx context.Context, in *SimpleOperationRequest, opts ...grpc.CallOption) (*SimpleOperationResponse, error) {
	out := new(SimpleOperationResponse)
	err := c.cc.Invoke(ctx, "/SimpleOperation/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpleOperationServer is the server API for SimpleOperation service.
// All implementations must embed UnimplementedSimpleOperationServer
// for forward compatibility
type SimpleOperationServer interface {
	Sum(context.Context, *SimpleOperationRequest) (*SimpleOperationResponse, error)
	mustEmbedUnimplementedSimpleOperationServer()
}

// UnimplementedSimpleOperationServer must be embedded to have forward compatible implementations.
type UnimplementedSimpleOperationServer struct {
}

func (UnimplementedSimpleOperationServer) Sum(context.Context, *SimpleOperationRequest) (*SimpleOperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (UnimplementedSimpleOperationServer) mustEmbedUnimplementedSimpleOperationServer() {}

// UnsafeSimpleOperationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimpleOperationServer will
// result in compilation errors.
type UnsafeSimpleOperationServer interface {
	mustEmbedUnimplementedSimpleOperationServer()
}

func RegisterSimpleOperationServer(s grpc.ServiceRegistrar, srv SimpleOperationServer) {
	s.RegisterService(&SimpleOperation_ServiceDesc, srv)
}

func _SimpleOperation_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleOperationServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SimpleOperation/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleOperationServer).Sum(ctx, req.(*SimpleOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SimpleOperation_ServiceDesc is the grpc.ServiceDesc for SimpleOperation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimpleOperation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SimpleOperation",
	HandlerType: (*SimpleOperationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _SimpleOperation_Sum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simple_operation.proto",
}
