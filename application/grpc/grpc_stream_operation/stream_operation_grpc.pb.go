// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.17.1
// source: stream_operation.proto

package grpc_stream_operation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamOperationClient is the client API for StreamOperation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamOperationClient interface {
	PrimeDecompose(ctx context.Context, in *OperationRequest, opts ...grpc.CallOption) (StreamOperation_PrimeDecomposeClient, error)
	AverageClientStream(ctx context.Context, opts ...grpc.CallOption) (StreamOperation_AverageClientStreamClient, error)
	AverageBidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (StreamOperation_AverageBidirectionalStreamClient, error)
}

type streamOperationClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamOperationClient(cc grpc.ClientConnInterface) StreamOperationClient {
	return &streamOperationClient{cc}
}

func (c *streamOperationClient) PrimeDecompose(ctx context.Context, in *OperationRequest, opts ...grpc.CallOption) (StreamOperation_PrimeDecomposeClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamOperation_ServiceDesc.Streams[0], "/StreamOperation/PrimeDecompose", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamOperationPrimeDecomposeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamOperation_PrimeDecomposeClient interface {
	Recv() (*OperationResponse, error)
	grpc.ClientStream
}

type streamOperationPrimeDecomposeClient struct {
	grpc.ClientStream
}

func (x *streamOperationPrimeDecomposeClient) Recv() (*OperationResponse, error) {
	m := new(OperationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamOperationClient) AverageClientStream(ctx context.Context, opts ...grpc.CallOption) (StreamOperation_AverageClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamOperation_ServiceDesc.Streams[1], "/StreamOperation/AverageClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamOperationAverageClientStreamClient{stream}
	return x, nil
}

type StreamOperation_AverageClientStreamClient interface {
	Send(*OperationRequest) error
	CloseAndRecv() (*OperationResponse, error)
	grpc.ClientStream
}

type streamOperationAverageClientStreamClient struct {
	grpc.ClientStream
}

func (x *streamOperationAverageClientStreamClient) Send(m *OperationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamOperationAverageClientStreamClient) CloseAndRecv() (*OperationResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(OperationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamOperationClient) AverageBidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (StreamOperation_AverageBidirectionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamOperation_ServiceDesc.Streams[2], "/StreamOperation/AverageBidirectionalStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamOperationAverageBidirectionalStreamClient{stream}
	return x, nil
}

type StreamOperation_AverageBidirectionalStreamClient interface {
	Send(*OperationRequest) error
	Recv() (*OperationResponse, error)
	grpc.ClientStream
}

type streamOperationAverageBidirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *streamOperationAverageBidirectionalStreamClient) Send(m *OperationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamOperationAverageBidirectionalStreamClient) Recv() (*OperationResponse, error) {
	m := new(OperationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamOperationServer is the server API for StreamOperation service.
// All implementations must embed UnimplementedStreamOperationServer
// for forward compatibility
type StreamOperationServer interface {
	PrimeDecompose(*OperationRequest, StreamOperation_PrimeDecomposeServer) error
	AverageClientStream(StreamOperation_AverageClientStreamServer) error
	AverageBidirectionalStream(StreamOperation_AverageBidirectionalStreamServer) error
	mustEmbedUnimplementedStreamOperationServer()
}

// UnimplementedStreamOperationServer must be embedded to have forward compatible implementations.
type UnimplementedStreamOperationServer struct {
}

func (UnimplementedStreamOperationServer) PrimeDecompose(*OperationRequest, StreamOperation_PrimeDecomposeServer) error {
	return status.Errorf(codes.Unimplemented, "method PrimeDecompose not implemented")
}
func (UnimplementedStreamOperationServer) AverageClientStream(StreamOperation_AverageClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AverageClientStream not implemented")
}
func (UnimplementedStreamOperationServer) AverageBidirectionalStream(StreamOperation_AverageBidirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AverageBidirectionalStream not implemented")
}
func (UnimplementedStreamOperationServer) mustEmbedUnimplementedStreamOperationServer() {}

// UnsafeStreamOperationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamOperationServer will
// result in compilation errors.
type UnsafeStreamOperationServer interface {
	mustEmbedUnimplementedStreamOperationServer()
}

func RegisterStreamOperationServer(s grpc.ServiceRegistrar, srv StreamOperationServer) {
	s.RegisterService(&StreamOperation_ServiceDesc, srv)
}

func _StreamOperation_PrimeDecompose_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OperationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamOperationServer).PrimeDecompose(m, &streamOperationPrimeDecomposeServer{stream})
}

type StreamOperation_PrimeDecomposeServer interface {
	Send(*OperationResponse) error
	grpc.ServerStream
}

type streamOperationPrimeDecomposeServer struct {
	grpc.ServerStream
}

func (x *streamOperationPrimeDecomposeServer) Send(m *OperationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamOperation_AverageClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamOperationServer).AverageClientStream(&streamOperationAverageClientStreamServer{stream})
}

type StreamOperation_AverageClientStreamServer interface {
	SendAndClose(*OperationResponse) error
	Recv() (*OperationRequest, error)
	grpc.ServerStream
}

type streamOperationAverageClientStreamServer struct {
	grpc.ServerStream
}

func (x *streamOperationAverageClientStreamServer) SendAndClose(m *OperationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamOperationAverageClientStreamServer) Recv() (*OperationRequest, error) {
	m := new(OperationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamOperation_AverageBidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamOperationServer).AverageBidirectionalStream(&streamOperationAverageBidirectionalStreamServer{stream})
}

type StreamOperation_AverageBidirectionalStreamServer interface {
	Send(*OperationResponse) error
	Recv() (*OperationRequest, error)
	grpc.ServerStream
}

type streamOperationAverageBidirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *streamOperationAverageBidirectionalStreamServer) Send(m *OperationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamOperationAverageBidirectionalStreamServer) Recv() (*OperationRequest, error) {
	m := new(OperationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamOperation_ServiceDesc is the grpc.ServiceDesc for StreamOperation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamOperation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StreamOperation",
	HandlerType: (*StreamOperationServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrimeDecompose",
			Handler:       _StreamOperation_PrimeDecompose_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AverageClientStream",
			Handler:       _StreamOperation_AverageClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AverageBidirectionalStream",
			Handler:       _StreamOperation_AverageBidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream_operation.proto",
}
